include env.conf;


worker_processes  1;
events {
    worker_connections  1024;
}

http {

    # set search paths for pure Lua external libraries (';;' is the default path):
    lua_package_path '${prefix}../lua/?.lua;;';
    init_by_lua_file '../lua/init_phase.lua';
    # a shorter log format for development
    log_format development '$remote_addr [$time_local] "$request" $status $body_bytes_sent "$request_time ms"';

    resolver 127.0.0.11 ipv6=off;

    server_tokens off;

    include mime.types;

    # If we can't determine file type via mime.types, and it's not a lua or Postgres /rest json response...
    default_type application/octet-stream;

    # Include production configuration - folder will be empty for development
    include prod/*.conf;

    server {
        listen 80 default_server;
        server_name _;
        charset utf-8;
        # uninitialized_variable_warn off;

        # switch between log formats depending on env
        set_by_lua_block $development  { return os.getenv('DEVELOPMENT') or "0" }
        set $log_development 0;
        set $log_production 0;
        if ($development = "1") {
            set $log_development 1;
        }
        if ($development = "0") {
            set $log_production 1;
        }
        access_log logs/access.log combined    if=$log_production;
        access_log logs/access.log development if=$log_development;


        include gzip.conf;
        include rest.conf;


        # this is the last location in the chain that points to html directory
        # this is where the files of your frontend application would go (html/javascript/css)
        location / {
            root html;
            # Let frontend handle routing
            try_files $uri /index.html;
        }

        # session management
        set_by_lua_block $session_secret  { return os.getenv('COOKIE_SESSION_SECRET') }

        # TODO: also match /rest/rpc/login
        location /login {
          types {}
          charset utf-8;
          default_type 'application/json';
          charset_types 'application/json';
          content_by_lua_file '../lua/authenticator.lua';
        }
        

        location /test {
          default_type  text/html;
            content_by_lua '
                local session = require "resty.session".open()
                ngx.say("<html><body>Session was started by <strong>",
                        session.data.name or "Anonymous",
                        session.data.jwt or "no jwt set",
                        "</strong>! <a href=/modify>Modify the session</a>.</body></html>")
            ';
        }
        location /modify {
          default_type  text/html;
            content_by_lua '
                local session = require "resty.session".start()
                session.data.name = "Lua Fan"
                session:save()
                ngx.say("<html><body>Session modified. ",
                        "<a href=/modified>Check if it is modified</a>!</body></html>")
            ';
        }
        location /modified {
          default_type  text/html;
            content_by_lua '
                local session = require "resty.session".open()
                ngx.say("<html><body>Session was modified by <strong>",
                        session.data.name or "Anonymous",
                        "</strong>! <a href=/destroy>Destroy the session</a>.</body></html>")
            ';
        }
        location /destroy {
          default_type  text/html;
            content_by_lua '
                require "resty.session".destroy()
                ngx.say("<html><body>Session was destroyed. ",
                        "<a href=/check>Is it really so</a>?</body></html>")
            ';
        }

        include image_server.conf;
    }
}
